blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(blogdown)
blogdown::build_site()
packageVersion("blogdown")
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
install.packages("reticulate")
install.packages("reticulate")
blogdown:::serve_site()
blogdown:::new_post_addin()
library(reticulate)
ues_python('E:/software/Program Files/python3.11.0')
my_version <- R.version()
my_version <- R.Version()
my_version
library(reticulate)
use_python('E:/software/Program Files/python3.11.0')
reticulate::repl_python()
hex(255)
import numpy as np
import matplotlib.pyplot as plt
# 计算正弦曲线上的 x 和 y 坐标
x = np.arrange(0, 3*np.pi, 0.1)
y = np.sin(x)
plt.title("sine wave form)
# 使用 matplotlib 来绘制点
plt.plot(x, y)
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# 计算正弦曲线上的 x 和 y 坐标
x = np.arange(0, 3*np.pi, 0.1)
y = np.sin(x)
plt.title("sine wave form)
# 使用 matplotlib 来绘制点
plt.plot(x, y)
plt.show()
import numpy as np
import matplotlib.pyplot as plt
# 计算正弦曲线上的 x 和 y 坐标
x = np.arange(0, 3*np.pi, 0.1)
y = np.sin(x)
plt.title("sine wave form)
# 使用 matplotlib 来绘制点
plt.plot(x, y)
plt.show()
exit
reticulate::repl_python()
import numpy as np
import matplotlib.pyplot as plt
# 计算正弦曲线上的 x 和 y 坐标
x = np.arange(0, 3*np.pi, 0.1)
y = np.sin(x)
plt.title("sine wave form)
# 使用 matplotlib 来绘制点
plt.plot(x, y)
plt.show()
quit
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
knit_engines$set()
bookdown:::mathquill()
bookdown:::mathquill()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
在一般的 k-nearest neighbor algorithm 中，每个 object(or instance) 被视作为 feature
space 中的一个 feature vector，且对于两个 feature vector 的距离，常用 Euclidean distance，即
\begin{equation}
Dist(a,b)=\lVert a-b \rVert.
\end{equation}
为判断 bag 的标签，需要对上式进行修改，即采用 minimal Hausdorff distance：给定两个 bag
`$A=\{a_1,\cdots,a_m\}$`和`$B=\{b_1,\cdots,b_n\}$`，其中`$a_i(1\leqslant i \leqslant m)$`和
`$b_j(1\leqslant j \leqslant n)$`是 instance。将其看作两个 feature set，则这两个bag
的距离衡量为
\begin{equation}
\begin{aligned}
Dist(A,B)&=\mathop{MIN}\limits_{1\leqslant i\leqslant m,1\leqslant j\leqslant n}(Dist(a_i,b_j))\\
&=\mathop{MIN}\limits_{a\in A}\mathop{MIN}\limits_{b\in B}\lVert a-b\rVert
\end{aligned}
\end{equation}
library(tinytex)
install.packages("tinytex")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(blogdown)
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages("bookdown")
blogdown::stop_server()
blogdown:::serve_site()
remove.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("blogdown")
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown::stop_server()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
reticulate::repl_python()
reticulate::repl_python()
import numpy as np
n = 20
d = 100
np.random.seed(0)
X = np.random.rand(n,d) + 0.5
X.shape
from spo import spo_l1_path
ws, lambdas, gaps, n_iters, n_active_features = spo_l1_path(X, func=0,
n_lambdas=50, screen=True, max_iter=int(1e4), f=200, tol=1e-3)
import numpy as np
n = 20
d = 100
np.random.seed(0)
X = np.random.rand(n,d) + 0.5
X.shape
#from spo import spo_l1_path
#ws, lambdas, gaps, n_iters, n_active_features = spo_l1_path(X, func=0,
#    n_lambdas=50, screen=True, max_iter=int(1e4), f=200, tol=1e-3)
np.random.rand(n,d)
import numpy as np
n = 20
d = 100
np.random.seed(0)
X = np.random.rand(n,d) + 0.5
X.shape
from spo import spo_l1_path
ws, lambdas, gaps, n_iters, n_active_features = spo_l1_path(X, func=0,
n_lambdas=50, screen=True, max_iter=int(1e4), f=200, tol=1e-3)
import numpy as np
n = 20
d = 100
np.random.seed(0)
X = np.random.rand(n,d) + 0.5
X.shape
from spo import spo_l1_path
ws, lambdas, gaps, n_iters, n_active_features = spo_l1_path(X, func=0,
n_lambdas=50, screen=True, max_iter=int(1e4), f=200, tol=1e-3)
quit
blogdown:::insert_image_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::new_post_addin()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
bookdown:::mathquill()
bookdown:::mathquill()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
library(blogdown)
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::insert_image_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
